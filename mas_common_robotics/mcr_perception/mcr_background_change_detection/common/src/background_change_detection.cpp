#include <mcr_background_change_detection/background_change_detection.h>

BackgroundChangeDetection::BackgroundChangeDetection()
{
    bsmog_ = cv::createBackgroundSubtractorMOG2();
}

BackgroundChangeDetection::~BackgroundChangeDetection()
{

}

bool BackgroundChangeDetection::detectBackgroundChange(const cv::Mat &current_frame, cv::Mat &debug_image)
{
    cv::Mat fgMaskMOG; //fg mask generated by MOG method
    cv::Mat hist;
    int histSize = 256; // bin size
    float range[] = {0, 256};
    const float *ranges[] = {range};

    bsmog_->apply(current_frame, fgMaskMOG, background_learning_rate_);

    if (is_debug_mode_)
    {
        fgMaskMOG.copyTo(debug_image);
    }

    cv::calcHist(&fgMaskMOG, 1, 0, cv::Mat(), hist, 1, &histSize, ranges, true, false);
    if (hist.at<float>(255) > background_change_threshold_)
    {
        return true;
    }
    else
    {
        return false;
    }
}

void BackgroundChangeDetection::updateDynamicVariables(bool debug_mode, double background_change_threshold, double background_learning_rate)
{
    is_debug_mode_ = debug_mode;
    background_change_threshold_ = background_change_threshold;
    background_learning_rate_ = background_learning_rate;
}